"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import Any, Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class OAuthAccessTokenObject(str, Enum):
    OAUTH_ACCESS_TOKEN = "oauth_access_token"


class OAuthAccessTokenTypedDict(TypedDict):
    r"""Success"""

    object: OAuthAccessTokenObject
    external_account_id: str
    r"""External account ID"""
    provider_user_id: str
    r"""The unique ID of the user in the external provider's system"""
    token: str
    r"""The access token"""
    expires_at: Nullable[int]
    r"""Unix timestamp of the access token expiration."""
    provider: str
    r"""The ID of the provider"""
    public_metadata: Dict[str, Any]
    label: Nullable[str]
    scopes: NotRequired[List[str]]
    r"""The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens."""
    token_secret: NotRequired[str]
    r"""The token secret. Only present for OAuth 1.0 tokens."""


class OAuthAccessToken(BaseModel):
    r"""Success"""

    object: OAuthAccessTokenObject

    external_account_id: str
    r"""External account ID"""

    provider_user_id: str
    r"""The unique ID of the user in the external provider's system"""

    token: str
    r"""The access token"""

    expires_at: Nullable[int]
    r"""Unix timestamp of the access token expiration."""

    provider: str
    r"""The ID of the provider"""

    public_metadata: Dict[str, Any]

    label: Nullable[str]

    scopes: Optional[List[str]] = None
    r"""The list of scopes that the token is valid for. Only present for OAuth 2.0 tokens."""

    token_secret: Optional[str] = None
    r"""The token secret. Only present for OAuth 1.0 tokens."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["scopes", "token_secret"]
        nullable_fields = ["expires_at", "label"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
