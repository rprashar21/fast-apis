"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Format(str, Enum):
    r"""The format of the response."""

    TOKEN = "token"
    COOKIE = "cookie"


class RefreshSessionRequestBodyTypedDict(TypedDict):
    r"""Refresh session parameters"""

    expired_token: str
    r"""The JWT that is sent via the `__session` cookie from your frontend.
    Note: this JWT must be associated with the supplied session ID.
    """
    refresh_token: str
    r"""The JWT that is sent via the `__session` cookie from your frontend."""
    request_origin: str
    r"""The origin of the request."""
    request_headers: NotRequired[Nullable[Dict[str, Any]]]
    r"""The headers of the request."""
    format_: NotRequired[Nullable[Format]]
    r"""The format of the response."""
    request_originating_ip: NotRequired[Nullable[str]]
    r"""The IP address of the request."""


class RefreshSessionRequestBody(BaseModel):
    r"""Refresh session parameters"""

    expired_token: str
    r"""The JWT that is sent via the `__session` cookie from your frontend.
    Note: this JWT must be associated with the supplied session ID.
    """

    refresh_token: str
    r"""The JWT that is sent via the `__session` cookie from your frontend."""

    request_origin: str
    r"""The origin of the request."""

    request_headers: OptionalNullable[Dict[str, Any]] = UNSET
    r"""The headers of the request."""

    format_: Annotated[OptionalNullable[Format], pydantic.Field(alias="format")] = (
        Format.TOKEN
    )
    r"""The format of the response."""

    request_originating_ip: OptionalNullable[str] = UNSET
    r"""The IP address of the request."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["request_headers", "format", "request_originating_ip"]
        nullable_fields = ["request_headers", "format", "request_originating_ip"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RefreshSessionRequestTypedDict(TypedDict):
    session_id: str
    r"""The ID of the session"""
    request_body: NotRequired[RefreshSessionRequestBodyTypedDict]
    r"""Refresh session parameters"""


class RefreshSessionRequest(BaseModel):
    session_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the session"""

    request_body: Annotated[
        Optional[RefreshSessionRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
    r"""Refresh session parameters"""
